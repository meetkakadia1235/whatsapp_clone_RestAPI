package com.api.controller;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.api.dao.RegisterDAO;
import com.api.dto.Response;
import com.api.model.RegistrationVO;
import com.api.model.messageVO;
import com.api.service.RegisterService;

@RestController
@CrossOrigin()
public class Controller {
	@Autowired
	private RegisterService rs;
	
	@Autowired
	private RegisterDAO dao;
	
	@PostMapping(value="/InsertRegistration")
	public ResponseEntity InsertRegistration(@RequestBody RegistrationVO regVO){
		rs.insert(regVO);
		Response res = new Response();
		res.setStatus(true);
		res.setMessage("Done");
		res.setData(regVO);
		return new ResponseEntity(res,HttpStatus.OK);
	}
	
	@GetMapping(value = "/login/{username}/{password}")
	public ResponseEntity Login(@PathVariable String username,@PathVariable String password) {
		RegistrationVO rvo = new RegistrationVO();
		rvo.setUsername(username);
		rvo.setPassword(password);
		List<RegistrationVO> ls = rs.login(rvo);
		boolean status = false;
		if(ls.size() > 0) {
			status = true;
		}
		Response res = new Response();
		res.setStatus(status);
		res.setMessage("Done");
		res.setData(ls);
		return new ResponseEntity(res,HttpStatus.OK);
	}
	
	@PostMapping(value="/sendMessage")
	public ResponseEntity sendMessages(@RequestBody messageVO mvo){
		Date date = new Date();
		mvo.setDate(date);
		rs.sendMessages(mvo);
		Response res = new Response();
		res.setStatus(true);
		res.setMessage("Done");
		return new ResponseEntity(res,HttpStatus.OK);
	}
	
	@DeleteMapping(value="/deleteMessage/{id}")
	public ResponseEntity deleteMessage(@PathVariable int id){
		messageVO mvo= new messageVO();
		mvo.setId(id);
		mvo.setStatus(false);
		rs.deleteMessage(mvo);
		Response res = new Response();
		res.setStatus(true);
		res.setMessage("Done");
		return new ResponseEntity(res,HttpStatus.OK);
	}
	
	@GetMapping(value="/getMessages/{id}")
	public ResponseEntity getMessages(@PathVariable int id){
		messageVO mvo= new messageVO();
		mvo.setId(id);
		List<messageVO> ls = rs.getMessages(mvo);
		Response res = new Response();
		res.setData(ls);
		res.setStatus(true);
		res.setMessage("Done");
		return new ResponseEntity(res,HttpStatus.OK);
	}
	
	@GetMapping(value="/searchOtherUser/{username}")
	public ResponseEntity searchOtherUser(@PathVariable String username){
		RegistrationVO vo = new RegistrationVO();
		vo.setUsername(username);
		List<RegistrationVO> ls = rs.search(vo);
	}
}